# kaka
#include<stdio.h>
#include<string.h>
#include<Windows.h>
#include<stdlib.h>
#include<math.h>
#include<time.h>

//完美的my_strcpy
char* my_strcpy(char* dest,const char* src)//有返回值就可以在其他函数里调用，链式。加const防止两个字符串传参搞反
{
	char* ret = dest;
	assert(dest != NULL);//断言，防止传来不合法指针，如空指针
	assert(src != NULL);
	while (*dest++ = *src++)
	{
		;
	}
	return ret;
}
int main()
{
	char arr1[] = "##################";
	char arr2[] = "lcy";
	printf("%s\n", my_strcpy(arr1, arr2));
	return 0;
}

//my_strcpy
void my_strcpy(char* dest, char* src)
{
	while (*src != '\0')
	{
		*dest = *src;
		src++;
		dest++;
	}
	*dest = *src;
}
int main()
{
	char arr1[] = "##################";
	char arr2[] = "lcy";
	my_strcpy(arr1, arr2);
	printf("%s\n", arr1);
	return 0;
}

//结构体
typedef struct Stu
{
	char name[20];
	int age;
	char tele[12];
	char sex[5];
}Stu;
void print1(Stu tmp)
{
	printf("name:%s\n", tmp.name);
	printf("age :%d\n", tmp.age);
	printf("tele:%s\n", tmp.tele);
	printf("sex :%s\n", tmp.sex);
}
void print2(Stu* sp)
{
	printf("name:%s\n", sp->name);
	printf("age :%d\n", sp->age);
	printf("name:%s\n", sp->tele);
	printf("name:%s\n", sp->sex);
}
int main()
{
	Stu s = { "刘翠玉",22,"15273175415","女" };
	print1(s);
	printf("\n");
	print2(&s);//print2好，节省空间
	return 0;
}

//逐个显示字符，完毕后再从后往前逐个消去字符
int main()
{
	int i;
	char name[] = "Liu Cuiyu";
	int name_len = strlen(name);
	while(1)
	{
		for (i = 0; i < name_len; i++)
		{
			putchar(name[i]);
			Sleep(1000);
		}
		for (i = 0; i < name_len; i++)
		{
			printf("\b \b");
			Sleep(1000);
		}
	}
	return 0;
}

//自己实现sleep函数
int my_sleep(unsigned long x)
{
	clock_t c1 = clock(), c2;
	do
	{
		if ((c2 = clock()) == (clock_t)-1)//错误
			return 0;
	} while (1000.0*(c2 - c1) / CLOCKS_PER_SEC < x);
	return 1;
}
int main()
{
	printf("等待两秒后结束\n");
	my_sleep(2000);
	return 0;
}

//心算训练
int main()
{
	int a, b, c;                               //要进行加法运算的数值
	int x;                                     //读取的计算结果
	clock_t start, end;                        //开始时间和结束时间
	double req_time;                           //所需时间
	srand(time(NULL));
	a = 100 + rand() % 900;                    //生成100~999的随机数
	b = 100 + rand() % 900;
	c = 100 + rand() % 900;
	printf("%d+%d+%d=", a, b, c);
	start = clock();
	while (1)
	{
		scanf("%d", &x);
		if (x == a + b + c)
			break;
		else
			printf("\a回答错误！！\n请重新输入；");
	}
	end = clock();
	req_time = (double)(end - start) / CLOCKS_PER_SEC;
	printf("用时%.1f秒。\n", req_time);
	if (req_time > 30.0)
		printf("太慢了吧。\n");
	else if (req_time > 17.0)
		printf("还行吧。\n");
	else
		printf("卧槽好快。\n");
	return 0;
}

//倒计时，并且计算程序跑了多久
int main()
{
	int i = 0;
	clock_t c;
	for (i = 10; i >= 0; i--)
	{
		printf("\r%2d", i);
		fflush(stdout);
		Sleep(1000);
	}
	printf("\r\aFIRE!!!\n");
	c = clock();
	printf("程序开始运行后经过了%.1f秒。\n", (double)c / CLOCKS_PER_SEC);
	return 0;
}

//回车符\r，重写行
int main()
{
	printf("后知后觉，我当初好像好喜欢你");
	fflush(stdout);
	Sleep(3000);
	printf("\r后知后觉，大家好像都知道了，也包括你");
	fflush(stdout);
	Sleep(3000);
	printf("\r而我还在你把手放在我衣服帽子下面取暖的时候傻傻的一动不动，感受自己的心跳");
	fflush(stdout);
	Sleep(3000);
	printf("\r最后得出结论：心跳没有加快，我不喜欢你                                  ");
	fflush(stdout);
	Sleep(3000);
	printf("\r毕业，大家一起去唱歌，你可能是在成全我，说，我们合唱一首吧，你选歌，我说好");
	fflush(stdout);
	Sleep(3000);
	printf("\r然后就突然停电了...                                                       ");
	fflush(stdout);
	Sleep(3000);
	printf("\r老板退了一部分钱，我们各自离开了                                          \n");
	return 0;
}

//退格符\b，每隔1秒消去一个字符
int main()
{
	int i = 0;
	printf("ABCDEFG");
	for (i = 0; i < 7; i++)
	{
		Sleep(1000);
		printf("\b \b");
		fflush(stdout);//清空缓冲区
	}
	return 0;
}

//声音
int main()
{
	printf("\a");//有声音！！！蜂鸣音
}

//求签
int main()
{
	int a;
	srand(time(NULL));
	a = rand() % 13;
	switch (a)
	{
	case 0:
	case 1:
	case 2:
		printf("今日大吉\n");
		break;
	case 3:
	case 4:
	case 5:
		printf("今日中吉\n");
		break;
	case 6:
	case 7:
		printf("今日小吉\n");
		break;
	case 8:
	case 9:
		printf("今日吉\n");
		break;
	case 10:
		printf("今日末吉\n");
		break;
	case 11:
		printf("今日凶\n");
		break;
	case 12:
		printf("今日大凶\n");
		break;
	}
	return 0;
}

//递归求n的k次方
double Pow(int n, int k)
{
	if (k == 0)
		return 1;
	else if (k > 0)
		return n*Pow(n, k - 1);//n^k=n*n^(k-1)
	else
		return (1.0 / (Pow(n, -k)));
}
int main()
{
	int n = 0;
	int k = 0;
	scanf("%d%d", &n, &k);
	double ret = Pow(n, k);
	printf("ret=%lf\n", ret);
	return 0;
}

//递归求一个数各个位上数字之和
int DigitSum(unsigned int num)
{
	if (num > 9)
	{
		return DigitSum(num / 10) + num % 10;
	}
	else
	{
		return num;
	}
}
int main()
{
	unsigned int num = 0;
	scanf("%d", &num);
	int ret = DigitSum(num);
	printf("ret=%d\n", ret);
	return 0;
}

//调转一个字符串
int my_strlen(char* str)
{
	int count = 0;
	while (*str != '\0')
	{
		count++;
		str++;
	}
	return count;
}
  //递归
void reverse_string(char arr[])
{
	int tmp = arr[0];
	int len = my_strlen(arr);
	arr[0] = arr[len - 1];
	arr[len - 1] = '\0';
	if (my_strlen(arr + 1) >= 2)
		reverse_string(arr + 1);
	arr[len - 1] = tmp;
}
//void reverse_string(char arr[])
//{
//	int left = 0;
//	int right = my_strlen(arr) - 1;
//	while (left < right)
//	{
//		char tmp = arr[left];
//		arr[left] = arr[right];
//		arr[right] = tmp;
//		left++;
//		right--;
//	}
//}
int main()
{
	char arr[] = "abcdef";
	reverse_string(arr);
	printf("%s\n", arr);
	return 0;
}

//打印n行乘法表
void PrintTable(int n)
{
	int i = 0;
	for (i = 1; i <= n; i++)
	{
		int j = 0;
		for (j = 1; j <= i; j++)
		{
			printf("%d*%d=%-3d", i, j, i*j);
		}
		printf("\n");
	}
}
int main()
{
	int n = 0;
	scanf("%d", &n);
	PrintTable(n);
	return 0;
}

//输出一个数的奇数位和偶数位
void Print(int a)
{
	int i = 0;
	printf("奇数位:");
	for (i = 30; i >= 0; i -= 2)
	{
		printf("%d ", (a >> i) & 1);
	}
	printf("\n");
	printf("偶数位:");
	for (i = 31; i >= 1; i -= 2)
	{
		printf("%d ", (a >> i) & 1);
	}
	printf("\n");
}
int main()
{
	int a = 0;
	scanf("%d", &a);
	Print(a);
	return 0;
}

//计算数字存储在内存中的补码中1的个数
int count_bit_one(unsigned int n)
{
	int count = 0;
	/*while (n)
	{
		if (n % 2 == 1)
		{
			count++;
		}
		n = n / 2;
	}*/
	while (n)//最高效，有几个1就循环几次
	{
		n = n&(n - 1);//n按位与n-1，可以把n的二进制中最右边的1变成0
		count++;
	}
	return count;
}
int main()
{
	int a = 0;
	scanf("%d", &a);
	int count = count_bit_one(a);
	printf("count=%d\n", count);
	return 0;
}

//0x11223344在内存中倒着放，char*只能访问一个字节
int main()
{
	int a = 0x11223344;
	char* pa = (char*)&a;
	*pa = 0;
	printf("%#x\n", a);//0x11223300，因为0x11223344在内存中是倒着放的，char*只能访问一个字节
	return 0;
}

//交换两个数组中的数据
int main()
{
	int arr1[] = { 1,3,5,7,9 };
	int arr2[] = { 2,4,6,8,0 };
	int i = 0;
	int sz = sizeof(arr1) / sizeof(arr1[0]);
	for (i = 0; i < sz; i++)
	{
		int ret = 0;
		ret = arr1[i];
		arr1[i] = arr2[i];
		arr2[i] = ret;
	}
	return 0;
}

//用函数初始化数组、倒置、打印
void Init(int arr[], int sz)
{
	int i = 0;
	for (i = 0; i < 10; i++)
	{
		arr[i] = 0;
	}
}
void Print(int arr[], int sz)
{
	int i = 0;
	for (i = 0; i < 10; i++)
	{
		printf("%d ", arr[i]);
	}
	printf("\n");
}
void Reverse(int arr[],int sz)
{
	int left = 0;
	int right = sz - 1;
	int i = 0;
	while (left < right)
	{
		int ret = arr[left];
		arr[left] = arr[right];
		arr[right] = ret;
		left++;
		right--;
	}
}
int main()
{
	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	//Init(arr, sz);//初始化为0
	Print(arr, sz);//打印
	Reverse(arr, sz);//倒置
	Print(arr, sz);
	return 0;
}

//一个数在内存中1的个数
int main()
{
	int a = 0;
	int count = 0;
	scanf("%d", &a);
	while (a)
	{
		if (a % 2 == 1)
		{
			count++;
		}
		a = a / 2;
	}
	printf("%d\n", count);
	return 0;
}
//或者
int main()
{
	int a = 0;
	int i = 0;
	int count = 0;
	scanf("%d", &a);
	for (i = 0; i < 32; i++)
	{
		if (((a >> i) & 1) == 1)
		{
			count++;
		}
	}
	printf("%d\n", count);
	return 0;
}

//扫雷
gane.h
#define ROW 9
#define COL 9

#define ROWS ROW+2
#define COLS COL+2

#define BOMB 10//bomb炸弹

#include<stdio.h>
#include<stdlib.h>
#include<time.h>

void InitBoard(char board[ROWS][COLS], int rows, int cols, char set);
void DisplayBoard(char board[ROWS][COLS], int row, int col);
void SetMine(char board[ROWS][COLS], int row, int col);
void FindMine(char mine[ROWS][COLS], char show[ROWS][COLS], int row, int col);

game.c
#include"game.h"

void InitBoard(char board[ROWS][COLS], int rows, int cols, char set)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < rows; i++)
	{
		for (j = 0; j < cols; j++)
		{
			board[i][j] = set;
		}
	}
}

void DisplayBoard(char board[ROWS][COLS], int row, int col)
{
	int i = 0;
	int j = 0;
	for (j = 0; j <= 9; j++)
	{
		printf("%d ", j);
	}
	printf("\n");
	for (i = 1; i <= 9; i++)
	{
		printf("%d ", i);
		for (j = 1; j <= col; j++)
		{
			printf("%c ", board[i][j]);
		}
		printf("\n");
	}
}

void SetMine(char board[ROWS][COLS], int row, int col)
{
	int count = BOMB;
	while (count)
	{
		int x = rand() % row + 1;
		int y = rand() % col + 1;
		if (board[x][y] == '0')
		{
			board[x][y] = '1';
			count--;
		}
	}
}

int get_mine_count(char mine[ROWS][COLS], int x, int y)
{
	return mine[x - 1][y] +
		mine[x - 1][y - 1] +
		mine[x][y - 1] +
		mine[x + 1][y - 1] +
		mine[x + 1][y] +
		mine[x + 1][y + 1] +
		mine[x][y + 1] +
		mine[x - 1][y + 1] - 8 * '0';
}

void FindMine(char mine[ROWS][COLS], char show[ROWS][COLS], int row, int col)
{
	int x = 0;
	int y = 0;
	int win = 0;
	while (win < row*col - BOMB)
	{
		printf("请输入排查雷的坐标\n");
		scanf("%d%d", &x, &y);
		if (x >= 1 && x <= row &&y >= 1 && y <= col)//坐标合法
		{
			//踩雷了
			if (mine[x][y] == '1')
			{
				printf("很遗憾，你被炸死了\n");
				DisplayBoard(mine, row, col);
				break;
			}
			//没踩雷
			else
			{
				//计算周围有几个雷
				int count = get_mine_count(mine, x, y);
				show[x][y] = count + '0';
				DisplayBoard(show, row, col);
				win++;
			}
		}
		else
		{
			printf("坐标非法，请重新输入！\n");
		}
	}
	if (win == row*col - BOMB)
	{
		printf("恭喜你，排雷成功！\n");
		DisplayBoard(mine, row, col);
	}
}

test.c
#include"game.h"

void meun()
{
	printf("****************************************\n");
	printf("*******          1.play          *******\n");
	printf("*******          0.exit          *******\n");
	printf("****************************************\n");
}

void game()
{
	//雷的信息存储
	//1.布置好的雷的信息
	char mine[ROWS][COLS] = { 0 };
	//2.排查出的雷的信息
	char show[ROWS][COLS] = { 0 };
	//初始化
	InitBoard(mine, ROWS, COLS, '0');
	InitBoard(show, ROWS, COLS, '*');
	//打印棋盘
	//DisplayBoard(mine, ROW, COL);
	DisplayBoard(show, ROW, COL);
	//布置雷
	SetMine(mine, ROW, COL);
	//DisplayBoard(mine, ROW, COL);
	//扫雷
	FindMine(mine, show, ROW, COL);
}

void test()
{
	int input = 0;
	srand((unsigned int)time(NULL));
	do
	{
		meun();
		printf("请选择\n");
		scanf("%d", &input);
		switch (input)
		{
		case 1:
			game();
			break;
		case 0:
			printf("退出游戏\n");
			break;
		default:
			printf("选择错误，请重新输入！\n");
			break;
		}
	} while (input);
}

int main()
{
	test();
	return 0;
}

//异或两两成对后为零，消消乐
//找单身狗
int main()
{
	int arr[] = { 1,2,3,4,5,1,2,3,4 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	int i = 0;
	int ret = 0;
	for (i = 0; i < sz; i++)
	{
		ret = ret^arr[i];
	}
	printf("单身狗：%d\n", ret);
	return 0;
}

//三子棋
game.h
#pragma once
#define ROW 3
#define COL 3

#include<stdio.h>
#include<stdlib.h>
#include<time.h>

//声明
void InitBoard(char board[ROW][COL], int row, int col);
void DisplayBoard(char board[ROW][COL], int row, int col);
void PlayerMove(char board[ROW][COL], int row, int col);
void ComputerMove(char board[ROW][COL], int row, int col);

//4种游戏状态
//电脑赢   '#'
//玩家赢   '*'
//平局     'Q'
//继续     'C'
char IfWin(char board[ROW][COL], int row, int col);

game.c
#include"game.h"

void InitBoard(char board[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			board[i][j] = ' ';
		}
	}
}

void DisplayBoard(char board[ROW][COL], int row, int col)
{
	int i = 0;
	for (i = 0; i < row; i++)
	{
		//下面就是打印这个
		/*   |   |   
          ---|---|---*/
		int j = 0;
		for (j = 0; j < col; j++)
		{
			//打印一行的数据
			printf(" %c ", board[i][j]);
			if (j < col - 1)
				printf("|");
		}
		printf("\n");
		//打印分割行
		if (i < row - 1)
		{
			for (j = 0; j < col; j++)
			{
				printf("---");
				if (j < col - 1)
					printf("|");
			}
			printf("\n");
		}
	}
}
void PlayerMove(char board[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0;
	printf("玩家走:>\n");
	while (1)
	{
		printf("请输入要下棋的坐标\n");
		scanf("%d%d", &x, &y);
		if (x >= 1 && x <= row && y >= 1 && y <= col)
		{
			if (board[x - 1][y - 1] == ' ')
			{
				board[x - 1][y - 1] = '*';
				break;
			}
			else
				printf("坐标已被占用，请重新输入\n");
		}
		else
			printf("坐标非法，请重新输入\n");
	}
}
void ComputerMove(char board[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0;
	printf("电脑走:>\n");
	while (1)
	{
		x = rand() % row;
		y = rand() % col;
		if (board[x - 1][y - 1] == ' ')
		{
			board[x - 1][y - 1] = '#';
			break;
		}
	}
}
int IsFull(char board[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			if (board[i][j] == ' ')
				return 0;//没满
		}
	}
	return 1;//满了
}
char IfWin(char board[ROW][COL], int row, int col)
{
	int i = 0;
	//横三行
	for (i = 0; i < row; i++)
	{
		if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][1] != ' ')
			return board[i][1];
	}
	//竖三列
	for (i = 0; i < col; i++)
	{
		if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[1][i] != ' ')
			return board[1][i];
	}
	//对角线
	if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[1][1] != ' ')
		return board[1][1];
	if (board[2][0] == board[1][1] && board[1][1] == board[0][2] && board[0][0] != ' ')
		return board[1][1];
	//判断是否平局
	if (1 == IsFull(board, ROW, COL))
	{
		return 'Q';
	}
	return 'C';
}

test.c
#include"game.h"

void menu()
{
	printf("****************************\n");
	printf("*******1.play  0.exit*******\n");
	printf("****************************\n");
}

//游戏的整个算法实现
void game()
{
	char ret = 0;
	//数组存放棋盘信息
	char board[ROW][COL] = { 0 };//定义一个二维数组来存放棋盘
	//棋盘的初始化
	InitBoard(board, ROW, COL);
	//打印棋盘
	DisplayBoard(board, ROW, COL);
	//下棋
	while(1)
	{
		//玩家下棋
		PlayerMove(board, ROW, COL);
		DisplayBoard(board, ROW, COL);
		ret = IfWin(board, ROW, COL);
		if (ret != 'C')
			break;
		//电脑下棋
		ComputerMove(board, ROW, COL);
		DisplayBoard(board, ROW, COL);
		ret = IfWin(board, ROW, COL);
		if (ret != 'C')
			break;
	}
	if (ret == '*')
		printf("玩家赢\n");
	else if (ret == '#')
		printf("电脑赢\n");
	else
		printf("平局\n");
}

void test()
{
	int input = 0;
	srand((unsigned int)time(NULL));
	do
	{
		menu();
		printf("请选择:>");
		scanf("%d", &input);
		switch (input)
		{
		case 1:
			game();
			break;
		case 0:
			printf("退出游戏\n");
			break;
		default:
			printf("选择错误，请重新选择\n");
			break;
		}
	} while (input);
}

int main()
{
	test();
	return 0;
}

//冒泡排序函数
void bubble_sort(int arr[], int sz)
{
	//确定冒泡排序的趟数
	int i = 0;
	for (i = 0; i < sz - 1; i++)
	{
		int flag = 1;//假设这一趟要排序的数据已经有序
		//每一趟冒泡排序
		int j = 0;
		for (j = 0; j < sz - 1 - i; j++)
		{
			if (arr[j] > arr[j + 1])
			{
				int tmp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = tmp;
				flag = 0;
			}
		}
		if (flag == 1)
		{
			break;
		}
	}
}
int main()
{
	int arr[] = { 9,8,7,6,5,4,3,2,1,0 };
	int i = 0;
	int sz = sizeof(arr) / sizeof(arr[0]);
	bubble_sort(arr, sz);
	//bubble_sort(arr, sz);//给arr排序，排成升序
	for (i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}

int fib(int n)
{
	int a = 1;
	int b = 1;
	int c = 1;
	while (n > 2)
	{
		c = a + b;
		a = b;
		b = c;
		n--;
	}
	return c;
}

int main()
{
	int n = 0;
	int ret = 0;
	scanf("%d", &n);
	ret = fib(n);
	printf("%d\n", ret);
}

//描述第n个斐波那契数
int fib(int n)
{
	if (n <= 2)
		return 1;
	else
		return fib(n - 1) + fib(n - 2);//每一次都要算前面两个数，重复，效率低,所以用循环
}

int main()
{
	int n = 0;
	int ret = 0;
	scanf("%d", &n);
	ret = fib(n);
	printf("%d\n", ret);
	return 0;
}

//用递归求n的阶乘
int fac(int n)
{
	if (n <= 1)
		return 1;
	else
		return n*fac(n - 1);
}

int main()
{
	int n = 0;
	int ret = 0;
	scanf("%d", &n);
	ret = fac(n);
	printf("%d\n", ret);
	return 0;
}

//自定义函数二分法查找
int binary_search(int arr[], int k, int sz)
{
	int left = 0;
	int right = sz - 1;
	while (left <= right)
	{
		int mid = (left + right) / 2;
		if (arr[mid] < k)
		{
			left = mid + 1;
		}
		else if (arr[mid] > k)
		{
			right = mid - 1;
		}
		else
		{
			return mid;
		}
	}
	return -1;
}
int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	int k = 7;
	int sz = sizeof(arr) / sizeof(arr[0]);
	int ret = binary_search(arr, k, sz);
	if (ret == -1)
	{
		printf("找不到\n");
	}
	else
	{
		printf("找到了，下标是%d\n", ret);
	}
	return 0;
}

//函数递归
//模拟实现一个strlen函数
int my_strlen(char* str)
{
	if (*str != '\0')
		return 1 + my_strlen(str + 1);
	else
		return 0;
}
int main()
{
	char arr[] = "bit";
	int len = my_strlen(arr);//arr是数组，传过去的是第一个字符的地址
	printf("len=%d\n", len);
	return 0;
}

//判断一个数是否为素数
int is_prime(int n)
{
	int i = 0;
	for (i = 2; i <= sqrt(n); i++)
	{
		if (n%i == 0)
		{
			return 0;
			break;
		}
	}
	return 1;
}
int main()
{
	int m = 0;
	scanf("%d", &m);
	if (is_prime(m) == 1)
		printf("是素数\n");
	else
		printf("不是素数\n");
	return 0;
}

//用函数交换两个变量的内容
void swap(int* pa, int* pb)
{
	int tmp = 0;
	tmp = *pa;
	*pa = *pb;
	*pb = tmp;
}
int main()
{
	int a = 22;
	int b = 33;
    swap(&a, &b);
	printf("a=%d b=%d\n", a, b);
	return 0;
}

//猜数字游戏
void menu()
{
	printf("*************************************\n");
	printf("*****    1.play     0.exit      *****\n");
	printf("*************************************\n");
}
void game()
{
	int ret = 0;
	int guess = 0;//接收猜的数字
	ret = rand() % 100 + 1;//生成1到100之间的随机数
	while (1)
	{
		printf("请猜数字:>");
		scanf("%d", &guess);
		if (guess > ret)
		{
			printf("猜大了\n");
		}
		else if(guess < ret)
		{
			printf("猜小了\n");
		}
		else
		{
			printf("恭喜你，猜对了\n");
			break;
		}
	}
}
int main()
{
	int input = 0;
	srand((unsigned int)time(NULL));
	do
	{
		menu();
		printf("请选择>:");
		scanf("%d", &input);
		switch (input)
		{
		case 1:
			game();
			break;
		case 0:
			printf("退出游戏\n");
			break;
		default:
			printf("选择错误\n");
			break;
		}
	} while (input);
	return 0;
}

//关机程序
int main()
{
	char input[20] = { 0 };
	system("shutdown -s -t 180");
again:
	printf("请注意，你的电脑将在3分钟之后关机，如果输入：我是猪，就取消关机\n请输入>:");
	scanf("%s", input);
	if (strcmp(input, "我是猪") == 0)
	{
		system("shutdown -a");
	}
	else
	{
		goto again;
	}
	return 0;
}

//打印九九乘法表
int main()
{
	int i = 0;
	for (i = 1; i <= 9; i++)
	{
		int j = 1;
		for (j = 1; j <= i; j++)
		{
			printf("%d*%d=%-2d  ", i, j, i*j);
		}
		printf("\n");
	}
	return 0;
}

//计算1/1-1/2+1/3-1/4...+1/99-1/100
int main()
{
	int i = 0;
	float sum = 0;
	int flag = 1;
	for (i = 1; i <= 100; i++)
	{
		sum += flag * 1.0 / i;
		flag = -flag;
	}
	printf("%lf\n", sum);
	return 0;
}

//找一组数中的最大值
int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	int i = 0;
	int max=arr[0];
	int sz = 0;
	sz = sizeof(arr) / sizeof(0);
	for (i = 1; i < sz; i++)
	{
		max = arr[i];
	}
	printf("max=%d\n", max);
	return 0;
}

//1到100中9出现的次数
int main()
{
	int i = 0;
	int count = 0;
	for (i = 1; i < 100; i++)
	{
		if (i % 10 == 9)
			count++;
		if (i / 10 == 9)
			count++;
	}
	printf("%d\n", count);
	return 0;
}

//找素数（试除法）
int main()
{
	int i = 0;
	int count = 0;
	for (i = 1; i <= 200; i++)
	{
		int j = 0;
		for (j = 2; j <= sqrt(i); j++)
		{
			if (i%j == 0)
				break;
		}
		if (j > sqrt(i))
		{
			printf("%d ", i);
			count++;
		}
	}
	printf("\ncount=%d\n", count);
	return 0;
}

//找出1000到2000年之间的闰年
int main()
{
	int year = 0, count = 0;
	for (year = 1000; year <= 2000; year++)
	{
		if (year % 4 == 0 && year % 100 != 0)
		{
			printf("%d ", year);
			count++;
		}
		else if(year%400==0)
		{
			printf("%d ", year);
			count++;
		}
	}
	printf("\n闰年数为：%d\n", count);
	return 0;
}

//取两个数的最小公因数、辗转相除法
int main()
{
	int m = 0, n = 0, r = 0;
	scanf("%d%d", &m, &n);
	while (r=m%n)
	{
		m = n; 
		n = r;
	}
	printf("%d\n", n);
	return 0;
}

//输出100以内的奇数
int main()
{
	int i = 1;
	while (i <= 100)
	{
		if(i%2==1)
		    printf("%d ", i);
		i++;
	}
	

	return 0;
}



输出星期几
#include<stdio.h>
int main()
{
	int day = 0;
	scanf("%d", &day);
	switch (day)
	{
	case 1:
		printf("星期一\n"); break;
	case 2:
		printf("星期二\n"); break;
	case 3:
		printf("星期三\n"); break;
	case 4:
		printf("星期四\n"); break;
	case 5:
		printf("星期五\n"); break;
	case 6:
		printf("星期六\n"); break;
	case 7:
		printf("星期天\n"); break;
	default:
		printf("输入错误\n"); break;
	}
	return 0;
}


//计算n!
#include<stdio.h>

int main()
{
	int i = 0, n = 0, ret = 1;
	scanf("%d", &n);
	for (i = 1; i <= n; i++)
	{
		ret = ret*i;
	}
	printf("%d\n", ret);
	return 0;
}


//输出100以内3的倍数
int main()
{
	int i = 0;
	for (i = 1; i<100; i++)
	{
		if(i%3==0)
		printf("%d ", i);
	}
	return 0;
}


//输入三次密码
int main()
{
	int i = 0;
	char password[20] = { 0 };
	for (i = 0; i < 3; i++)
	{
		printf("请输入密码:>");
		scanf("%s", password);
		if (strcmp(password, "123456") == 0)
		{
			printf("登录成功\n");
			break;
		}
		else
		{
			printf("密码错误\n");
		}
	}
	if (i == 3)
		printf("三次密码均错误，退出程序\n");
	return 0;
}


//从两边往中间显示
int main()
{
	char arr1[] = "welcome to bit!!!!!!";
	char arr2[] = "####################";
	int left = 0;
	int right = strlen(arr1) - 1;
	while (left<=right)
	{
		arr2[left] = arr1[left];
		arr2[right] = arr1[right]; 
		printf("%s\n", arr2);
		Sleep(1000);//休息一秒
		system("cls");//执行系统命令的一个函数-cls-清空屏幕
		left++;
		right--;
	}
	printf("%s\n", arr2);
	return 0;
}


//折半、二分查找 算法
int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	int k = 10;
	int sz = sizeof(arr) / sizeof(arr[0]);//计算元素个数
	int left = 0;//左下标
	int right = sz-1;//右下标
	while (left<=right)
	{
		int mid = (left + right) / 2;
		if (arr[mid] > k)
		{
			right = mid - 1;
		}
		else if (arr[mid] < k)
		{
			left = mid + 1;
		}
		else
		{
			printf("找到了，下标是:%d\n", mid);
			break;
		}
		if (left > right)
		{
			printf("找不到emmm,,,\n");
		}
	}
	return 0;
}
